* Web.sh

  This project aims to form kind of a shell for the web.  It connects
  web-apps via window-messaging and let's you compose them like a
  shell-script.
** Run

   #+BEGIN_SRC sh
     npm install
     npm start

     # Now the browser opens. Open up a js console and execute a script
     # with the following code:
     #
     #   Websh('input | sed?regex=Foo&replace=bar | cat')
   #+END_SRC
** Tests

   #+BEGIN_SRC sh
     npm install
     npm test
   #+END_SRC
** User-Interface

   A script can be executed from a js console using the `Websh`
   function which accepts the script as a string and returnes a
   promise.
** Shell language

   The shell-language is designed to be lightweight and easy to
   pick-up and learn.  It's heavily inspired by unix shell scripts.
*** Example

    #+BEGIN_SRC sh
      # Pipelines
      https://mypage.com/prompt-input | https://secondpage.com/

      # Parameters
      https://mypage.com/prompt-input?text=Hello%20world
    #+END_SRC
** System calls

   The system communication is handled by sys-call-like messages with
   the following syntax:

   #+BEGIN_SRC javascript
     ["print", { my: 'message' }]
   #+END_SRC

   - ~print(<chunks>, ...)~

     This command sends output chunks to the system.
   - ~exit(<exitCode>)~

     This command exits the currently running process and hands-over
     an exit code.  A non-zero exit-code means failure.
** Missing features / Todo

   - +Refactor stdin interface+

     +Currently the message for the input of the program is designed to+
     +be the whole message sent to the iframe.  This should rather look+
     +like this:+

     +#+BEGIN_SRC js+
       +["stdin", <message>]+
     +#+END_SRC+

     +This has the advantage that the protocol can be extended in the+
     +future.+
   - +Remove `eval` query-param (See [[*Security%20implications][Security implications]]).+
   - Environment variables (pass shell-url to validate window
     messages)
   - Interactive shell

     This should be implemented as a plugin (See [[*Plugin-system][Plugin-system]]).
   - Handle exit codes to end scripts prematurely if a command fails
   - +Collect command-output in array+

     +To work towards the system-calls feature the command output+
     +should be captured in an array which is then passed to the next+
     +command. The change is therefore that each command needs to+
     +expect an array as input.+
** Known issues

   - Pipe characters in the query params to a command aren't handled
     correctly
** Security implications

   - +The `eval` query param is a security issue.  It makes it possible+
     +to inject code into a user-space by composing a link and making+
     +the user click it.+
   - Commands that operate on sensible user-data should use the second
     parameter of `window.parent.postMessage()` to avoid sending data
     to malicious targets.
** Thoughts / ideas

*** Plugin-system

    Provide a plugin-system that loads foreign modules via `import()`.
    The idea comes from offering an IDE for user-authored scripts
    (stored in the localStorage/indexedDB).  These scripts could then
    be executed through the interface that is exposed on the `window`.

    This plugin-system might even be possible without modification
    since it could be encouraged to directly edit the `index.html` of
    the project.  But it should be cleaned up.
